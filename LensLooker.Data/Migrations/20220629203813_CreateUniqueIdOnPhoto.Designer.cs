// <auto-generated />
using System;
using LensLooker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LensLooker.Data.Migrations
{
    [DbContext(typeof(LensLookerContext))]
    [Migration("20220629203813_CreateUniqueIdOnPhoto")]
    partial class CreateUniqueIdOnPhoto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LensLooker.Data.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Canon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nikon"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sony"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Leica"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pentax"
                        });
                });

            modelBuilder.Entity("LensLooker.Data.Models.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Lens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AliasOfId")
                        .HasColumnType("int");

                    b.Property<int?>("LensFamilyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AliasOfId");

                    b.HasIndex("LensFamilyId");

                    b.HasIndex("Name", "LensFamilyId")
                        .IsUnique()
                        .HasFilter("[LensFamilyId] IS NOT NULL");

                    b.ToTable("Lenses");
                });

            modelBuilder.Entity("LensLooker.Data.Models.LensFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CameraBrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SensorFormat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CameraBrandId");

                    b.ToTable("LensFamilies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CameraBrandId = 1,
                            Name = "EF",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 2,
                            CameraBrandId = 1,
                            Name = "EF L",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 3,
                            CameraBrandId = 1,
                            Name = "EF-S",
                            SensorFormat = 1
                        },
                        new
                        {
                            Id = 4,
                            CameraBrandId = 1,
                            Name = "RF",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 5,
                            CameraBrandId = 1,
                            Name = "RF L",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 6,
                            CameraBrandId = 3,
                            Name = "DT",
                            SensorFormat = 1
                        },
                        new
                        {
                            Id = 7,
                            CameraBrandId = 3,
                            Name = "DT G",
                            SensorFormat = 1
                        },
                        new
                        {
                            Id = 8,
                            CameraBrandId = 3,
                            Name = "DT ZA",
                            SensorFormat = 1
                        },
                        new
                        {
                            Id = 9,
                            CameraBrandId = 3,
                            Name = "E",
                            SensorFormat = 1
                        },
                        new
                        {
                            Id = 10,
                            CameraBrandId = 3,
                            Name = "FE",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 11,
                            CameraBrandId = 3,
                            Name = "FE G",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 12,
                            CameraBrandId = 3,
                            Name = "FE ZA",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 13,
                            CameraBrandId = 1,
                            Name = "EF-M",
                            SensorFormat = 1
                        },
                        new
                        {
                            Id = 14,
                            CameraBrandId = 3,
                            Name = "SAL",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 15,
                            CameraBrandId = 3,
                            Name = "SAL G",
                            SensorFormat = 0
                        },
                        new
                        {
                            Id = 16,
                            CameraBrandId = 3,
                            Name = "SAL ZA",
                            SensorFormat = 0
                        });
                });

            modelBuilder.Entity("LensLooker.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CameraId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTimeShot")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExposureTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FNumber")
                        .HasColumnType("float");

                    b.Property<int>("Farm")
                        .HasColumnType("int");

                    b.Property<int?>("FocalLengthInMm")
                        .HasColumnType("int");

                    b.Property<bool>("IsExifFetched")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("bit");

                    b.Property<int?>("Iso")
                        .HasColumnType("int");

                    b.Property<int?>("LensId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LensId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.HasIndex("CameraId", "LensId", "IsExifFetched");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Camera", b =>
                {
                    b.HasOne("LensLooker.Data.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Lens", b =>
                {
                    b.HasOne("LensLooker.Data.Models.Lens", "AliasOf")
                        .WithMany()
                        .HasForeignKey("AliasOfId");

                    b.HasOne("LensLooker.Data.Models.LensFamily", "LensFamily")
                        .WithMany()
                        .HasForeignKey("LensFamilyId");

                    b.Navigation("AliasOf");

                    b.Navigation("LensFamily");
                });

            modelBuilder.Entity("LensLooker.Data.Models.LensFamily", b =>
                {
                    b.HasOne("LensLooker.Data.Models.Brand", "CameraBrand")
                        .WithMany()
                        .HasForeignKey("CameraBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CameraBrand");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Photo", b =>
                {
                    b.HasOne("LensLooker.Data.Models.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("CameraId");

                    b.HasOne("LensLooker.Data.Models.Lens", "Lens")
                        .WithMany("Photos")
                        .HasForeignKey("LensId");

                    b.Navigation("Camera");

                    b.Navigation("Lens");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Lens", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
