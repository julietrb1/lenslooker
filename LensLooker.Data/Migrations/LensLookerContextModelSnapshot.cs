// <auto-generated />
using System;
using LensLooker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LensLooker.Data.Migrations
{
    [DbContext(typeof(LensLookerContext))]
    partial class LensLookerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LensLooker.Data.Models.Camera", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Lens", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Lenses");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Photo", b =>
                {
                    b.Property<string>("PhotoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CameraName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateTimeShot")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExposureTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FNumber")
                        .HasColumnType("float");

                    b.Property<int>("Farm")
                        .HasColumnType("int");

                    b.Property<int?>("FocalLengthInMm")
                        .HasColumnType("int");

                    b.Property<bool>("IsExifFetched")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("bit");

                    b.Property<int?>("Iso")
                        .HasColumnType("int");

                    b.Property<string>("LensName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoId");

                    b.HasIndex("CameraName");

                    b.HasIndex("LensName");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Photo", b =>
                {
                    b.HasOne("LensLooker.Data.Models.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("CameraName");

                    b.HasOne("LensLooker.Data.Models.Lens", "Lens")
                        .WithMany("Photos")
                        .HasForeignKey("LensName");

                    b.Navigation("Camera");

                    b.Navigation("Lens");
                });

            modelBuilder.Entity("LensLooker.Data.Models.Lens", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
