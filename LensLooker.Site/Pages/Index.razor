@page "/"
@using LensLooker.Site.Data

<PageTitle>@LensName</PageTitle>
@inject IPhotoService PhotoService
<div tabindex="0" @ref="_container" @onkeydown="OnKeyPress" id="container">
    <h1>@(LensName ?? "All lenses")</h1>
    <h2 class="text-muted h4 mb-4">Page @PageNumber.ToString("N0") of @PageCount.ToString("N0")</h2>

    <div class="row mb-4">
        <div class="col-md-3">
            <LensSelect LensGroups="@LensGroups" OnLensChange="@OnLensChange"/>
        </div>
        <div class="col-md-3">
            <PageSizeSelect PageSize="@PageSize" OnPageSizeChange="@OnPageSizeChange" ValidPageSizes="@_validPageSizes"/>
        </div>
    </div>

    <div class="photo-grid">
        <PhotoGallery Photos="@FilteredPhotos"/>
    </div>

    <div>
        <label>
            Page number
            <input @bind="PageNumberString"/>
        </label>
        <text class="me-3"> of @PageCount.ToString("N0")</text>
        <button class="btn btn-outline-secondary btn-sm" onclick="@HandlePageChange">Go</button>
    </div>

    <div class="btn-group mt-2" role="group" aria-label="Pagination buttons">
        @if (HasPreviousPage)
        {
            <a class="btn btn-primary" onclick="@LoadPreviousPage">Previous</a>
        }
        else
        {
            <button class="btn btn-primary" disabled="disabled">Previous</button>
        }

        @if (HasNextPage)
        {
            <a class="btn btn-primary" onclick="@LoadNextPage">Next</a>
        }
        else
        {
            <button class="btn btn-primary" disabled="disabled">Next</button>
        }
    </div>
</div>

@code {
    private readonly int[] _validPageSizes = { 10, 25, 50, 100 };

    private void OnLensChange(ChangeEventArgs e)
    {
        LensName = e.Value as string;
        PageNumber = 1;
        LoadPhotos();
    }

    private void HandlePageChange()
    {
        PageNumber = int.TryParse(PageNumberString, out var parsedPageNumber) ? parsedPageNumber : 1;
        LoadPhotos();
    }

    ElementReference _container;


    [Parameter]
    [SupplyParameterFromQuery]
    public string? LensName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int PageNumber
    {
        get => _pageNumber;
        set
        {
            _pageNumber = Math.Max(1, Math.Min(PageCount, value));
            PageNumberString = _pageNumber.ToString();
        }
    }

    private string PageNumberString { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public int PageSize
    {
        get => _pageSize;
        set => _pageSize = value != 0 ? value : 10;
    }

    private int TotalPhotoCount { get; set; }

    private int PageCount => FilteredPhotos != null ? (int)Math.Max(1, Math.Ceiling(TotalPhotoCount / (double)PageSize)) : 1;

    protected override void OnInitialized()
    {
        LensGroups = PhotoService.GetLenses();
        LoadPhotos();
    }

    private void LoadPhotos()
    {
        PageNumberString = PageNumber.ToString();
        FilteredPhotos = null;
        (TotalPhotoCount, FilteredPhotos) = PhotoService.GetPhotos(LensName, PageNumber, PageSize);
    }

    private IEnumerable<PhotoViewModel>? FilteredPhotos { get; set; }

    private Dictionary<string, IEnumerable<LensViewModel>>? LensGroups { get; set; }

    private int _pageNumber = 1;
    private int _pageSize = 10;

    private bool HasPreviousPage => PageNumber > 1;
    private bool HasNextPage => PageNumber < PageCount;

    private void OnKeyPress(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "j" when HasPreviousPage:
                LoadPreviousPage();
                break;
            case "l" when HasNextPage:
                LoadNextPage();
                break;
        }
    }

    private void LoadNextPage()
    {
        PageNumber += 1;
        LoadPhotos();
    }

    private void LoadPreviousPage()
    {
        PageNumber -= 1;
        LoadPhotos();
    }

    private void OnPageSizeChange(int pageSize)
    {
        PageSize = pageSize;
        LoadPhotos();
    }

}