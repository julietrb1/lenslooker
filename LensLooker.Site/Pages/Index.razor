@page "/"
@using LensLooker.Site.Data

<PageTitle>@LensName</PageTitle>
@inject IPhotoService PhotoService
<div tabindex="0" @ref="_container" @onkeydown="OnKeyPress" id="container">
    <h1>@(LensName ?? "All lenses")</h1>
    <h2 class="text-muted h4 mb-4">Page @PageNumber.ToString("N0") of @PageCount.ToString("N0")</h2>

    <p class="small">Press <code>j</code>/<code>l</code> for previous/next page.</p>

    <div class="row mb-4">
        <div class="col-md-3">
            <LensSelect LensGroups="@LensGroups" OnLensChange="@OnLensChange"/>
        </div>
        <div class="col-md-3">
            <PageSizeSelect PageSize="@PageSize" OnPageSizeChange="@OnPageSizeChange" ValidPageSizes="@ValidPageSizes"/>
        </div>
    </div>

    <PhotoGallery Photos="@FilteredPhotos"/>

    <div class="mb-4 d-flex justify-content-center">
        <div>
            <label>
                Page number
                <input @bind="PageNumberString"/>
            </label>
            <text class="me-3"> of @PageCount.ToString("N0")</text>
            <button class="btn btn-outline-secondary btn-sm" onclick="@HandlePageChange">Go</button>
        </div>

        <div class="btn-group mt-2" role="group" aria-label="Pagination buttons">
            @if (HasPreviousPage)
            {
                <a class="btn btn-primary" onclick="@LoadPreviousPage">Previous</a>
            }
            else
            {
                <button class="btn btn-primary" disabled="disabled">Previous</button>
            }

            @if (HasNextPage)
            {
                <a class="btn btn-primary" onclick="@LoadNextPage">Next</a>
            }
            else
            {
                <button class="btn btn-primary" disabled="disabled">Next</button>
            }
        </div>
    </div>
</div>

@code {
    private static readonly int[] ValidPageSizes = { 25, 50, 100 };

    private void OnLensChange(ChangeEventArgs e)
    {
        LensName = e.Value as string;
        PageNumber = 1;
        Task.Run(LoadPhotos).Wait();
    }

    private async Task HandlePageChange()
    {
        PageNumber = int.TryParse(PageNumberString, out var parsedPageNumber) ? parsedPageNumber : 1;
        await LoadPhotos();
    }

    ElementReference _container;


    [Parameter]
    [SupplyParameterFromQuery]
    public string? LensName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int PageNumber
    {
        get => _pageNumber;
        set
        {
            _pageNumber = Math.Max(1, Math.Min(PageCount, value));
            PageNumberString = _pageNumber.ToString();
        }
    }

    private string PageNumberString { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public int PageSize
    {
        get => _pageSize;
        set => _pageSize = value != 0 ? value : ValidPageSizes.First();
    }

    private int TotalPhotoCount { get; set; }

    private int PageCount => FilteredPhotos != null ? (int)Math.Max(1, Math.Ceiling(TotalPhotoCount / (double)PageSize)) : 1;

    protected override async Task OnInitializedAsync()
    {
        LensGroups = PhotoService.GetLenses();
        await LoadPhotos();
    }

    private async Task LoadPhotos()
    {
        PageNumberString = PageNumber.ToString();
        FilteredPhotos = null;
        (TotalPhotoCount, FilteredPhotos) = await PhotoService.GetPhotos(LensName, PageNumber, PageSize);
    }

    private IEnumerable<PhotoViewModel>? FilteredPhotos { get; set; }

    private Dictionary<string, IEnumerable<LensViewModel>>? LensGroups { get; set; }

    private int _pageNumber = 1;
    private int _pageSize = ValidPageSizes.First();

    private bool HasPreviousPage => PageNumber > 1;
    private bool HasNextPage => PageNumber < PageCount;

    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "j" when HasPreviousPage:
                await LoadPreviousPage();
                break;
            case "l" when HasNextPage:
                await LoadNextPage();
                break;
        }
    }

    private async Task LoadNextPage()
    {
        PageNumber += 1;
        await LoadPhotos();
    }

    private async Task LoadPreviousPage()
    {
        PageNumber -= 1;
        await LoadPhotos();
    }

    private async Task OnPageSizeChange(int pageSize)
    {
        PageSize = pageSize;
        await LoadPhotos();
    }

}