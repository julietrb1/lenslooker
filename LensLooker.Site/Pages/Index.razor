@page "/"
@using LensLooker.Site.Data
@using LensLooker.Data.Models

<PageTitle>@(LensDisplayName)&mdash;Lens Looker</PageTitle>
@inject IPhotoService PhotoService
<div tabindex="0" @ref="_container" @onkeydown="OnKeyPress" id="container">
    <h1 class="display-5">Lens Looker</h1>
    <p class="small">Press <code>j</code>/<code>l</code> for previous/next page.</p>

    <div class="row mb-4">
        <div class="col-md-3">
            <LensSelect LensGroups="@LensGroups" OnLensChange="@OnLensChange"/>
        </div>
        <div class="col-md-3">
            <PageSizeSelect PageSize="@PageSize" OnPageSizeChange="@OnPageSizeChange" ValidPageSizes="@ValidPageSizes"/>
        </div>
    </div>

    <PhotoGallery Photos="@FilteredPhotos" ShowLens="@(Lens == null)"/>

    <div class="mb-4 d-flex justify-content-center">
        <div class="btn-group mt-2" role="group" aria-label="Pagination buttons">
            @if (HasPreviousPage)
            {
                <a class="btn btn-primary" onclick="@LoadPreviousPage">Previous</a>
            }
            else
            {
                <button class="btn btn-primary" disabled="disabled">Previous</button>
            }

            @if (HasNextPage)
            {
                <a class="btn btn-primary" onclick="@LoadNextPage">Next</a>
            }
            else
            {
                <button class="btn btn-primary" disabled="disabled">Next</button>
            }
        </div>
    </div>
</div>

@code {
    private string LensDisplayName => Lens?.Name ?? "All lenses";
    private static readonly int[] ValidPageSizes = { 25, 50, 100 };

    private void OnLensChange(ChangeEventArgs e)
    {
        int.TryParse(e.Value as string, out var parsedLensId);
        Lens = parsedLensId > 0 ? LensGroups?.SelectMany(l => l).SingleOrDefault(l => l.Id == parsedLensId) : null;
        BeforeId = null;
        AfterId = null;
        Task.Run(LoadPhotos).Wait();
    }

    ElementReference _container;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? BeforeId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? AfterId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int PageSize
    {
        get => _pageSize;
        set => _pageSize = value != 0 ? value : ValidPageSizes.First();
    }

    private Lens? Lens { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LensGroups = PhotoService.GetLenses();
        await LoadPhotos();
    }

    private async Task LoadPhotos()
    {
        FilteredPhotos = null;
        (FilteredPhotos, HasPreviousPage, HasNextPage) = await PhotoService.GetPhotos(Lens?.Id, PageSize, BeforeId, AfterId);
    }

    private bool HasPreviousPage { get; set; }
    private bool HasNextPage { get; set; }

    private IEnumerable<PhotoDto>? FilteredPhotos { get; set; }

    private IEnumerable<IGrouping<string, Lens>>? LensGroups { get; set; }

    private int _pageSize = ValidPageSizes.First();

    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "j" when HasPreviousPage:
                await LoadPreviousPage();
                break;
            case "l" when HasNextPage:
                await LoadNextPage();
                break;
        }
    }

    private async Task LoadNextPage()
    {
        BeforeId = null;
        AfterId = FilteredPhotos?.Last().Id;
        await LoadPhotos();
    }

    private async Task LoadPreviousPage()
    {
        BeforeId = FilteredPhotos?.First().Id;
        AfterId = null;
        await LoadPhotos();
    }

    private async Task OnPageSizeChange(int pageSize)
    {
        PageSize = pageSize;
        await LoadPhotos();
    }

}